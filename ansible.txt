Info on ansible:

So you have a control machine and slave nodes.

In general ad-hoc command:
ansible <pattern_goes_here> -m <module_name> -a <arguments>

To test your install add some servers that have a running ssh to your
/ets/ansible/hosts file (create it if not present). You can add 127.0.0.1 to start with.

Then ping them to check all is ok. If you just bought a VPS then it has only root user and
you have not established ssh keys yet. So tell ansible to login as root and to ask you for
password.

$ ansible all -m ping -vvv --ask-pass --user=root


Ansible inventory is /etc/ansible.hosts by default. It describes different parts of your
infrastructure. You can specify a different inventory file using the -i <path> option on the command line.

More about inventory and file syntax: https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html

If changing default ssh port, you can set the valid port in the inventory file.

Modules

Documentation for each module in the ansible-doc tool:
$ ansible-doc yum

For a list of all available modules, run the following at a command prompt:
$ ansible-doc -l

Each module supports taking arguments. Nearly all modules take key=value arguments, space delimited. Some modules take no arguments, and the command/shell modules simply take the string of the command you want to run. Example of each:

$ ansible webservers -m service -a "name=httpd state=started"
$ ansible webservers -m ping
$ ansible webservers -m command -a "/sbin/reboot -t now"

Same rules for module arguments apply in playbooks.

From playbooks, Ansible modules are executed in a very similar way:
- name: reboot the servers
  action: command /sbin/reboot -t now

Which can be abbreviated, by changing the word 'action' to actual name of module:
- name: reboot the servers
  command: /sbin/reboot -t now

Another way to pass arguments to a module is using yaml syntax also called ‘complex args’
- name: restart webserver
  service:
    name: httpd
    state: restarted

