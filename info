




When you inspect a variable:
(gdb) p myvar
  $1 = 423
(gdb)
Now when you enter $1 gdb will substitute 423.


Example making a macro of earlier printf command:
(gdb) define pxy
Type commands for definition of "pxy".
End with a line saying just "end".
>printf "%X = %d, Y = %d\n",X,Y
>end


Break points:
1. A breakpoint stops your program whenever a particular point in the program is reached.
2. A watchpoint stops your program whenever the value of a variable or expression changes.
3. A catchpoint stops your program whenever a particular event occurs.

ignore on breakpoint is similar to setting a conditional breakpoint

In gdb this two lines are equal even if mystruct is not a pointer:
print myStruct.name
print myStruct->name

Print using a format specifier, FMT tell gdb how it should interpret the data found at variable's location:
print /FMT variable

where FMT is one of:
o (octal),   x (hex),     d (decimal),    u (unsigned decimal),
t (binary),  f (float),   a (address),    i (instruction), 
c (char),    s (string),  z (hex, zero padded on the left).
  
z FMT is better than x FMT, because z will show all the zeroes!

Breakpoint info looks like:
Breakpoint 1 at 0x8048540: file program3.c, line 55.
To list code around this breakpoint (bp with address 0x8048540) use:
list *0x8048540

So you are debugging a program and you are seeing lots of program output intermixed with debugger output.
What to do? You need to separate the I/O of the debugger and the I/O of the program!
How to do it: http://www.dirac.org/linux/gdb/07-Debugging_Ncurses_Programs.php
Summary:
  get two terminals
  get their device files with `tty` or `whoami`
  use gdb tty command to redirect the output of the debugged program to second terminal: tty /dev/pts/4
  now in first terminal is just gdb output and in second terminal is program output



Abbreviations
bp = breakpoint

br = break cmd
pt = ptype cmd



Good links:
http://www.unknownroad.com/rtfm/gdbtut/gdbwatch.html

http://www.dirac.org/linux/gdb/07-Debugging_Ncurses_Programs.php

http://heather.cs.ucdavis.edu/~matloff/UnixAndC/CLanguage/Debug.html    (apparently very good)
http://heather.cs.ucdavis.edu/~matloff/debug.html
